#include <stdio.h>

#include <stdlib.h>

struct node {
  struct node * LC;
  struct node * RC;
  int data;
}* root;
void starter() {
  root = (struct node * ) malloc(sizeof(struct node));
  printf("Enter root node:");
  scanf("%d", & (root -> data));
  root -> RC = NULL;
  root -> LC = NULL;
}
//struct node *root=(struct node*)malloc(sizeof(struct node));
struct node * parent;
void preorder(struct node * ptr) {
  if (ptr != NULL) {
    printf("%d ", ptr -> data);
    preorder(ptr -> LC);
    preorder(ptr -> RC);
  }
}

void inorder(struct node * ptr) {
  if (ptr != NULL) {
    inorder(ptr -> LC);
    printf("%d ", ptr -> data);
    inorder(ptr -> RC);
  }
}

void postorder(struct node * ptr) {
  if (ptr != NULL) {
    postorder(ptr -> LC);
    postorder(ptr -> RC);
    printf("%d ", ptr -> data);

  }
}

struct node * findParent(int item) {
  struct node * ptr = root, * ptr1;
  int flag = 0;
  while (ptr != NULL && flag != 1) {
    if (ptr -> data > item) {
      ptr1 = ptr;
      ptr = ptr -> LC;
    } else if (ptr -> data < item) {
      ptr1 = ptr;
      ptr - ptr -> RC;
    } else {
      flag = 1;
    }
  }
  if (flag == 1) {
    return ptr1;
  }
  /*
  if (node == NULL)
  return;

  if (node->data == val)
  {
     
  }
  else
  {
      findParent(node->left, val, node->data);
      findParent(node->right, val, node->data);
  }*/
}

struct node * sucessor(struct node * ptr) {

  if (ptr -> RC != NULL) {
    if (ptr -> LC != NULL) {
      ptr = ptr -> LC;
    } else {
      return ptr;
    }
  } else {
    if (parent -> LC == ptr) {
      return parent;
    } else {
      parent = findParent(parent -> data);
      sucessor(parent);
    }
  }
}

void insertion(int item) {
  struct node * ptr = root, * ptr1;
  int flag = 0;

  while (ptr != NULL && flag != 1) {
    if (ptr -> data > item) {
      ptr1 = ptr;
      ptr = ptr -> LC;
    } else if (ptr -> data < item) {
      ptr1 = ptr;
      ptr = ptr -> RC;
    } else {
      flag = 1;
    }
  }
  struct node * new = (struct node * ) malloc(sizeof(struct node));
  new -> data = item;
  new -> LC = NULL;
  new -> RC = NULL;
  if (flag == 1) {
    printf("Item already exists.\n");
  } else {
    if (item > ptr1 -> data) {
      ptr1 -> RC = new;
    } else {
      ptr1 -> LC = new;
    }
  }

}

void deletion(int item) {
  struct node * ptr = root, * parent;
  int flag = 0;
  int cs;
  while (ptr != NULL && flag != 1) {
    if (ptr -> data > item) {
      parent = ptr;
      ptr = ptr -> LC;
    } else if (ptr -> data < item) {
      parent = ptr;
      ptr = ptr -> RC;
    } else {
      flag = 1;
    }
  }
  if (flag == 1) {
    if (ptr -> LC == NULL && ptr -> RC == NULL) {
      cs = 1;
    } else if (ptr -> LC != NULL && ptr -> RC != NULL) {
      cs = 3;
    } else {
      cs = 2;
    }
    //CASE choosing
    if (cs == 1) {
      if (parent -> LC -> data == item)
        parent -> LC = NULL;
      else
        parent -> RC = NULL;
    } else if (cs == 2) {
      if (parent -> LC -> data == item) {
        if (ptr -> LC != NULL)
          parent -> LC = ptr -> LC;
        else
          parent -> LC = ptr -> RC;
      } else {
        if (ptr -> LC != NULL)
          parent -> RC = ptr -> LC;
        else
          parent -> RC = ptr -> RC;
      }

    } else {
      parent = sucessor(ptr);
      int item1 = parent -> data;
      deletion(item1);
      ptr -> data = item1;
    }
  } else {
    printf("Item was not found.\n");
  }
}

void search(int item) {
  struct node * ptr = root;
  int flag = 0;
  while (ptr != NULL && flag != 1) {
    if (ptr -> data > item) {
      ptr = ptr -> LC;
    } else if (ptr -> data < item) {
      ptr = ptr -> RC;
    } else {
      flag = 1;
    }
  }
  if (flag == 1) {
    printf("Item exists in tree.\n");
  } else {
    printf("Item does not exist.\n");
  }
}

void main() {
  //struct node *root;
  int item, f = 1, op;
  starter();
  printf("Binary Search Tree\n");
  printf("1.Insertion\n2.Deletion\n3.Search\n4.Preorder\n5.Inorder\n6.Postorder\n7.Exit\n");
  while (f == 1) {
    printf("Enter option:");
    scanf("%d", & op);
    if (op == 1) {
      printf("Enter item:");
      scanf("%d", & item);
      insertion(item);
    } else if (op == 2) {
      printf("Enter item:");
      scanf("%d", & item);
      deletion(item);
    } else if (op == 3) {
      printf("Enter item:");
      scanf("%d", & item);
      search(item);
    } else if (op == 4) {
      printf("Preorder is:");
      preorder(root);
      printf("\n");
    } else if (op == 5) {
      printf("Inorder is:");
      inorder(root);
      printf("\n");
    } else if (op == 6) {
      printf("Postorder is:");
      postorder(root);
      printf("\n");
    } else if (op == 7) {
      f = 0;
    } else {
      printf("Invalid Option\n");
    }
  }
}